;(function ($, window, document, undefined) {

	"use strict";

	// Defaults. null usually requires a jquery object, unless
	// specified. provide either prependTo, or appendTo, 
	// but not both.
	
	var pluginName = "jangoForm",
		defaults = {
			redirectURL: '',
			redirectOnSuccess: false,
			resetOnSuccess: true,
			formErrorElement: $('#form_errors'),
			formErrorClass: 'form-error',
			fieldErrorClass: 'error',
			handlebarsTemplate: null,
			prependTo: null,
			appendTo: null,
            idNamingConvention: "#id_"
		};

	// Plugin constructor

	function JangoForm(form, settings) {
		this.form = $(form);

		this.settings = settings;
		this._defaults = defaults;
		this._name = pluginName;
		this.init();
	}

	JangoForm.prototype = {


		init: function() {
			this.primeEventListeners();
		},

		// attach submit event listener to form.

		primeEventListeners: function() {
			var self = this;
			this.form.submit(function(event) {
				event.preventDefault();
				if ( self.form.data('disabled') ) {
					return;
				}
				self.toggleFormDisable();
				self.sendAjaxRequest(this);
			});
		},

		// disables form on submit, to avoid duplicate ajax calls.

		toggleFormDisable: function() {
			if ( this.form.data('disabled') ) {
				this.form.data('disabled', false);
			} else {
				this.form.data('disabled', true);
			}
		},

		// sends ajax request from given form 

		sendAjaxRequest: function(form) {
			var self = this;
			var $form = $(form);
			this.clearFormErrors($form);
			$.ajax({
				type: $form.attr('method'),
				url: $form.attr('action'),
				contentType: 'application/x-www-form-urlencoded;charset=utf-8',
				data: $form.serialize(),
				success: function(response) {
					self.parseAjaxSuccessResponse(response);
				},
				error: function(response, textStatus, jqXHR){
					self.parseAjaxErrorResponse(response);
				}
			});
		},

		// clears both field and form errors on 
		// provided form

		clearFormErrors: function(form) {
			var error_container = this.form.find(this.settings.formErrorElement);
			var cssClass = '.' + this.settings.fieldErrorClass;
			
			error_container.css('display', 'none');
			error_container.empty();
			$(cssClass, form).remove();
		},

		// parses response object from ajax success callback.
		// parses differently based on options given in constructor.

		parseAjaxSuccessResponse: function(response) {

			if (this.settings.redirectOnSuccess) {
				this.initiateRedirect(response);
			} else {

				this.toggleFormDisable();
			
				if (this.settings.resetOnSuccess) {
					this.form.trigger("reset");
				}

				if (this.settings.handlebarsTemplate) {
					this.renderHandlebars(response);

				} else {
					console.log("Please either provide a redirectURL and set redirect to true, or provide a handlebars template in the constructor.");
					return;
				}

			}
			
		},

		// called while parsing successful ajax response

		initiateRedirect: function(response) {
			if (this.settings.redirectURL) {
				window.location.replace(this.settings.redirectURL);
			} else {
				if (response.redirect_url) {
					window.location.replace(response.redirect_url);
				} else {
					if (response.get_absolute_url) {
						window.location.replace(response.get_absolute_url);
					} else {
						console.log("No url to redirect to. Please provide one in the constructor.");
						return;
					}
				}
			}
		},

		// renders handlebars template from json response and
		// provided handlebars template. either appends to
		// or prepends to element provided in constructor.

		renderHandlebars: function(response) {
			var context = response;
			var source = this.settings.handlebarsTemplate.html();
			var template = Handlebars.compile(source);

			// if element provided for both prependTO and appendTo option
			// in constructor, logs error to console and returns out of function.

			if (this.settings.prependTo && this.settings.appendTo) {
				console.log("Please supply an element to either prependTo, or appendTo, but not both.");
				return;
			} else {
			
				if (this.settings.prependTo) {

					var prependTo = this.settings.prependTo;
					prependTo.prepend(template(context));

				} else {

					if (this.settings.appendTo) {
						
						var appendTo = this.settings.appendTo;
						appendTo.append(template(context));

					}

				}

			}
		},

		// parses response object from ajax error callback

		parseAjaxErrorResponse: function(response) {
			var self = this;
			var errors = $.parseJSON(response.responseText);
			this.toggleFormDisable();
			$.each(errors, function(index, value) {
				if (index === "__all__") {
					self.applyFormError(value);
				} else {
					self.applyFieldError(index, value);
				}
			});
		},

		// apply form wide errors to container specified in options.

		applyFormError: function(error) {
			var error_container = this.form.find(this.settings.formErrorElement),
				error_msg = $('<span />').addClass(this.settings.formErrorClass).text(error[0]);

			error_container.css('display', 'block');
			error_container.append(error_msg);
		},

		// called on field error. index from loop of items in json response
		// used to find input field.

		applyFieldError: function(fieldname, error) {
			var input = this.form.find(this.settings.idNamingConvention + fieldname),
				error_msg = $("<span />").addClass(this.settings.fieldErrorClass).text(error[0]);

			error_msg.insertAfter(input);
		},


	};

	$.fn[ pluginName ] = function(options) {
		return this.each(function() {
			var settings = $.extend( {}, defaults, options );
			if ( !$.data( this, "plugin_" + pluginName ) ) {
				$.data( this, "plugin_" + pluginName, new JangoForm(this, settings ) );
			}
		}, options);
	};

})( jQuery, window, document );